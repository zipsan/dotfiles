" ====================
" +  zipsan's vimrc  +
" ====================



" ==================
"  general settings
" ==================
" -*- base -*-
set incsearch
set nocompatible
set history=10000
set backspace=indent,eol,start
set viminfo='100,<10000,s100,h
set wildmode=list:full,longest  " completion of filelist
set whichwrap=b,s,h,l,<,>,[,]
let &guicursor = &guicursor . ",a:blinkon0"
nnoremap x "_x
set vb t_vb=  "disable beep

" -*- indent/space/tab -*-
set smarttab
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=0
set smartindent
set cindent
autocmd FileType python setlocal tabstop=4


" -*- Appearance -*-
set title
set ruler
set number
set cursorline
set ambiwidth=double  " for double byte character
set t_Co=256
set splitright

set laststatus=2  " show statusline
set statusline=%F%r%h%=
set display=lastline
set showmatch

set list  " show invisible characters 
set listchars=tab:\ >,trail:_,extends:>,precedes:<,nbsp:%

" show zenkaku_space
function! ZenkakuSpace()
  highlight ZenkakuSpace cterm=underline ctermfg=darkgrey gui=underline guifg=darkgrey
endfunction
if has('syntax')
  augroup ZenkakuSpace
    autocmd!
    autocmd ColorScheme       * call ZenkakuSpace()
    autocmd VimEnter,WinEnter * match ZenkakuSpace /ã€€/
  augroup END
  call ZenkakuSpace()
endif


" -*- file -*-
filetype plugin on
filetype indent on

if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=utf-8,ucs-bom,latin1,iso-2022-jp,cp932
endif
autocmd BufRead,BufNewFile *.md set filetype=markdown



" ------------------------------------------
"  auto exec command when an event occured
" ------------------------------------------
" -*- event hook -*-
if has("autocmd")
  augroup last
    autocmd!
    " memory the last position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
    " control creation of a swapfile (settings of ignore directories)
    autocmd BufNewFile,BufReadPre /media/*,/mnt/* set directory=~/tmp,/var/tmp,/tmp
    autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec
  augroup END
endif


" -------------
"  Bundles
" -------------
" -*- denops.vim -*-
call plug#begin()
    Plug 'vim-denops/denops.vim'
    Plug 'vim-denops/denops-helloworld.vim'
    Plug 'Shougo/ddc-ui-native'
    Plug 'Shougo/ddc.vim'
    Plug 'Shougo/pum.vim'
    Plug 'Shougo/ddc-around'
    Plug 'LumaKernel/ddc-file'
    Plug 'Shougo/ddc-matcher_head'
    Plug 'Shougo/ddc-sorter_rank'
    Plug 'Shougo/ddc-converter_remove_overlap'
call plug#end()

" --------------------------
"  settings fot some tools
" --------------------------
" -*- ddc.vim -*-
call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('sources', ['around'])
call ddc#custom#patch_global('sourceOptions', #{
      \ _: #{
      \   matchers: ['matcher_head'],
      \   sorters: ['sorter_rank']},
      \ })
" Change source options
call ddc#custom#patch_global('sourceOptions', #{
      \   around: #{ mark: 'A' },
      \ })
call ddc#custom#patch_global('sourceParams', #{
      \   around: #{ maxSize: 500 },
      \ })
" Customize settings on a filetype
call ddc#custom#patch_filetype(['c', 'cpp'], 'sources',
      \ ['around', 'clangd'])
call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', #{
      \   clangd: #{ mark: 'C' },
      \ })
call ddc#custom#patch_filetype('markdown', 'sourceParams', #{
      \   around: #{ maxSize: 100 },
      \ })
" Mappings
" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()
" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'
" Use ddc.
call ddc#enable()

" -*- Quickrun -*-
let g:quickrun_config={
\  '*': {
\    'split': ':botright 10sp',
\    'outputter/buffer/running_mark': '-*- Running... -*-',
\    'outputter/buffer/into': '-*- Finished -*-',
\    'hook/time/enable': 1,
\    'runner': 'vimproc',
\    "runner/vimproc/updatetime" : 10,
\  }
\}
nnoremap <silent> <C-r> :QuickRun<CR>
autocmd BufRead,BufNewFile *.md nnoremap <silent> <C-r> :PrevimOpen<CR>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-w>b:quit<CR>:echohl WarningMsg<CR>:echo 'Process aborted by user interrupt'<CR>:echohl None<CR>"
set splitbelow
let g:quickrun_config.cpp = {
\   'command': 'g++',
\   'cmdopt': '-std=c++11'
\}

" ==========================
"  extra color appearance
" ==========================
highlight Pmenu ctermbg=Gray ctermfg=Black
highlight PmenuSel ctermbg=DarkBlue ctermfg=White
highlight PmenuSbar ctermbg=DarkGreen ctermfg=White
highlight CursorLine cterm=Bold ctermbg=None
highlight SpecialKey guibg=NONE guifg=Gray
highlight Comment ctermfg=DarkBlue
highlight MatchParen cterm=underline,bold ctermbg=None ctermfg=magenta


" ==================
"  Key binding
" ==================
set <xUp>=OA
set <xDown>=OB
set <xRight>=OC
set <xLeft>=OD
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
nnoremap <C-s> :VimShellPop<CR>
nmap <silent> <C-\> :nohlsearch<CR>
nnoremap <silent><C-e> :NERDTreeToggle<CR>
nnoremap <silent><C-i> :TagbarToggle<CR>
nnoremap <silent><C-t> :tabnew<CR>
nnoremap <silent><C-q> :q<CR>
nnoremap <silent>\[ :tabp<CR>
noremap <silent>\] :tabn<CR>
nnoremap j gj
nnoremap k gk
nnoremap <C-y> :redo<CR>
let g:multi_cursor_next_key='<C-d>'
nnoremap <silent><C-p> :set paste<CR>
nnoremap <silent><S-p> :set nopaste<CR>
nnoremap <silent><C-n> :set nonumber<CR>
nnoremap <silent><S-n> :set number<CR>
nnoremap <silent>O :<C-u>call append(expand('.'), '')<Cr>j

